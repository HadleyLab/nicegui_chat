"""
Quick demonstration of the NiceGUI Chat application.

This script shows the key features and components of the application.
"""

import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))


def print_header():
    """Print application header."""
    print("\n" + "=" * 70)
    print("ü§ñ NiceGUI Chat - Modern AI Chat Application")
    print("=" * 70)
    print()


def print_features():
    """Print application features."""
    print("‚ú® Features:")
    print("  ‚Ä¢ Modern, minimalistic UI with smooth animations")
    print("  ‚Ä¢ Real-time streaming chat responses")
    print("  ‚Ä¢ Memory-enhanced conversations via HeySol API")
    print("  ‚Ä¢ Context-aware AI powered by DeepSeek")
    print("  ‚Ä¢ Responsive design for desktop and mobile")
    print("  ‚Ä¢ Secure API key management")
    print()


def print_architecture():
    """Print architecture overview."""
    print("üèóÔ∏è  Architecture:")
    print("  ‚Ä¢ UI Layer: NiceGUI-based modern web interface")
    print("  ‚Ä¢ Services: Auth, Memory, Chat, and AI Agent services")
    print("  ‚Ä¢ Models: Pydantic models for type safety")
    print("  ‚Ä¢ Config: JSON + environment variable configuration")
    print()


def print_tech_stack():
    """Print technology stack."""
    print("üîß Technology Stack:")
    print("  ‚Ä¢ NiceGUI - Python web UI framework")
    print("  ‚Ä¢ Pydantic AI - AI agent framework")
    print("  ‚Ä¢ DeepSeek - Large language model")
    print("  ‚Ä¢ HeySol API - Memory management")
    print("  ‚Ä¢ Python 3.9+ - Programming language")
    print()


def print_usage():
    """Print usage instructions."""
    print("üöÄ Quick Start:")
    print("  1. Configure your API keys in .env file")
    print("  2. Run: python main.py")
    print("  3. Open: http://localhost:8080")
    print("  4. Start chatting with the AI assistant!")
    print()
    print("üìù Alternative ways to start:")
    print("  ‚Ä¢ python run.py")
    print("  ‚Ä¢ bash run.sh")
    print()


def check_config():
    """Check configuration status."""
    print("‚öôÔ∏è  Configuration Status:")
    try:
        from src.config import load_app_config
        config = load_app_config()
        
        # Check DeepSeek
        if config.llm.api_key:
            print("  ‚úì DeepSeek API key configured")
        else:
            print("  ‚úó DeepSeek API key NOT configured (required)")
        
        # Check HeySol
        if config.heysol.api_key:
            print("  ‚úì HeySol API key configured (memory enabled)")
        else:
            print("  ‚ö† HeySol API key NOT configured (memory disabled)")
        
        print(f"  ‚Ä¢ App will run on {config.app.host}:{config.app.port}")
        print()
        return True
    except Exception as e:
        print(f"  ‚úó Configuration error: {e}")
        print()
        return False


def print_customization():
    """Print customization options."""
    print("üé® Customization:")
    print("  ‚Ä¢ UI Theme: Edit config/app_config.json ‚Üí ui section")
    print("  ‚Ä¢ System Prompt: Edit prompts/system.md")
    print("  ‚Ä¢ Chat Behavior: Edit config/app_config.json ‚Üí chat section")
    print("  ‚Ä¢ Colors & Animations: Modify ui config values")
    print()


def print_footer():
    """Print footer with helpful links."""
    print("=" * 70)
    print("üìö Documentation:")
    print("  ‚Ä¢ README.md - Full documentation")
    print("  ‚Ä¢ DEVELOPMENT.md - Development guide")
    print("  ‚Ä¢ test_setup.py - System verification")
    print()
    print("üí° Tips:")
    print("  ‚Ä¢ Use Ctrl+C to stop the server")
    print("  ‚Ä¢ Check test_setup.py output for system verification")
    print("  ‚Ä¢ Memory features require HeySol API key")
    print("=" * 70)
    print()


def main():
    """Run the demonstration."""
    print_header()
    print_features()
    print_architecture()
    print_tech_stack()
    
    config_ok = check_config()
    
    print_usage()
    print_customization()
    print_footer()
    
    if not config_ok:
        print("‚ö†Ô∏è  Please fix configuration issues before running the application.")
        print()
        return 1
    
    # Ask if user wants to start the application
    try:
        response = input("Would you like to start the application now? (y/n): ").strip().lower()
        if response in ['y', 'yes']:
            print("\nüöÄ Starting NiceGUI Chat...")
            print("üìç Open your browser at: http://localhost:8080")
            print("Press Ctrl+C to stop the server\n")
            from main import main as run_app
            run_app()
        else:
            print("\nüëã You can start the application anytime with: python main.py")
            print()
    except KeyboardInterrupt:
        print("\n\nüëã Goodbye!")
        print()
    
    return 0


if __name__ == "__main__":
    sys.exit(main())
