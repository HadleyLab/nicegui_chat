#!/usr/bin/env python3
"""Test script to verify AI response sanitization on deployed MammoChat‚Ñ¢."""

import requests


def test_text_sanitization():
    """Test the text processing sanitization functions."""
    print("üß™ Testing text sanitization functions...")

    # Import the text processing function
    import sys
    import os

    # Add current directory to path first to prioritize local modules
    current_dir = os.path.dirname(os.path.abspath(__file__))
    sys.path.insert(0, current_dir)

    from utils.text_processing import strip_markdown

    # Test cases for markdown stripping
    test_cases = [
        ("**Bold text**", "Bold text"),
        ("*Italic text*", "Italic text"),
        ("_Italic text_", "Italic text"),
        ("`code`", "code"),
        ("```code block```", "code block"),
        ("# Header", "Header"),
        ("[Link](url)", "Link"),
        ("‚Ä¢ Bullet point", "Bullet point"),
        ("<script>alert('xss')</script>", ""),  # Should be sanitized
        ('<a onclick="evil()">Link</a>', "Link"),  # Should be sanitized
    ]

    all_passed = True
    for input_text, expected in test_cases:
        result = strip_markdown(input_text)
        if expected in result and not any(
            char in result
            for char in ["*", "_", "`", "#", "[", "]", "‚Ä¢", "<script", "onclick"]
        ):
            print(f"‚úÖ '{input_text}' -> '{result}'")
        else:
            print(f"‚ùå '{input_text}' -> '{result}' (expected: '{expected}')")
            all_passed = False

    return all_passed


def test_deployed_app():
    """Test the deployed application by making HTTP requests."""
    print("\nüåê Testing deployed application...")

    base_url = "http://nas.local:8080"

    try:
        # Test basic connectivity
        response = requests.get(base_url, timeout=10)
        if response.status_code == 200:
            print("‚úÖ Application is accessible")
        else:
            print(f"‚ùå Application returned status {response.status_code}")
            return False

        # Check if the page contains expected elements
        if "MammoChat‚Ñ¢" in response.text:
            print("‚úÖ Page contains MammoChat‚Ñ¢ branding")
        else:
            print("‚ùå Page missing MammoChat‚Ñ¢ branding")
            return False

        return True

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Could not connect to application: {e}")
        return False


def simulate_chat_test():
    """Test AI response sanitization by checking the deployed app's behavior."""
    print("\nüí¨ Testing AI response sanitization...")

    # Since direct testing is complex, we'll verify that the sanitization
    # functions are properly integrated by checking the code
    try:
        import os
        import sys

        # Add current directory and src to path
        current_dir = os.path.dirname(os.path.abspath(__file__))
        sys.path.insert(0, current_dir)
        sys.path.insert(0, os.path.join(current_dir, "src"))

        # Test that the AI service imports and uses strip_markdown
        # Check that AIService has the strip_markdown function available
        import inspect

        from src.services.ai_service import AIService
        from src.utils.text_processing import strip_markdown

        source = inspect.getsource(AIService.stream_chat)

        if "strip_markdown" in source:
            print("‚úÖ AI service uses strip_markdown for response sanitization")

            # Test the function with a sample that would be generated by AI
            test_response = "**Important:** Here are some *key points*:\n‚Ä¢ Point 1\n‚Ä¢ Point 2\n\n<script>alert('test')</script>"
            sanitized = strip_markdown(test_response)

            print("üìù Sample AI response sanitization:")
            print(f"   Input: {repr(test_response)}")
            print(f"   Output: {repr(sanitized)}")

            # Verify sanitization worked
            has_markdown = any(
                char in sanitized for char in ["*", "_", "‚Ä¢", "#", "[", "]", "`"]
            )
            has_script = "<script" in sanitized.lower()
            has_onclick = "onclick" in sanitized.lower()

            if has_markdown or has_script or has_onclick:
                print(
                    "‚ùå Sanitization failed - response still contains formatting or HTML"
                )
                return False
            else:
                print("‚úÖ Sanitization successful - response is clean plain text")
                return True
        else:
            print("‚ùå AI service does not use strip_markdown")
            return False

    except Exception as e:
        print(f"‚ùå Could not verify AI service sanitization: {e}")
        return False


def main():
    """Run all tests."""
    print("üöÄ Starting MammoChat‚Ñ¢ sanitization tests...\n")

    results = []

    # Test 1: Text sanitization functions
    results.append(("Text Sanitization", test_text_sanitization()))

    # Test 2: Deployed app connectivity
    results.append(("App Connectivity", test_deployed_app()))

    # Test 3: AI response sanitization
    results.append(("AI Response Sanitization", simulate_chat_test()))

    # Summary
    print("\nüìä Test Results:")
    all_passed = True
    for test_name, passed in results:
        status = "‚úÖ PASS" if passed else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if not passed:
            all_passed = False

    print(
        f"\nüèÅ Overall: {'‚úÖ ALL TESTS PASSED' if all_passed else '‚ùå SOME TESTS FAILED'}"
    )

    if all_passed:
        print("\nüéâ AI response sanitization is working correctly!")
        print("- Markdown formatting is stripped")
        print("- HTML is sanitized")
        print("- Responses appear as plain text")
    else:
        print("\n‚ö†Ô∏è  Some issues detected. Please review the failed tests.")


if __name__ == "__main__":
    main()
